use std.{
    memory,
    file.{File, FileMode},
    path.Path,
    io.{Writer, CFileWriter},
    convert.to_string,
};

struct Logger {
    var file: File;
    var writer: Writer[CFileWriter];
    var depth: u32;
}

var instance: Logger;

func create_instance(path: Path) {
    instance.file = File.open(path, FileMode.WRITE).unwrap();
    instance.writer = instance.file.writer();
    instance.depth = 0;
}

pub func info[Args: ...](format: String, args: Args) {
    var string = "";

    var i: usize = 0;

    meta for arg in args {
        while i < format.length() && format.bytes()[i] != '%' {
            string.append(format.bytes()[i]);
            i += 1;
        }

        string.append(to_string(&arg));
        i += 1;
    }

    while i < format.length() {
        string.append(format.bytes()[i]);
        i += 1;
    }

    instance.writer.write("[info ] ");

    for i in 0..instance.depth {
        instance.writer.write(' ');
        instance.writer.write(' ');
    }

    instance.writer.write(string);
    instance.writer.write('\n');
    instance.writer.flush();
}

pub func warn(message: String) {
    instance.writer.write("[warn ] ");

    for i in 0..instance.depth {
        instance.writer.write(' ');
        instance.writer.write(' ');
    }

    instance.writer.write(message);
    instance.writer.write('\n');
    instance.writer.flush();
}

pub func error(message: String) {
    instance.writer.write("[ERROR] ");
    instance.writer.write(message);
    instance.writer.write('\n');
    instance.writer.flush();
}

pub func enter_scope() {
    instance.depth += 1;
}

pub func exit_scope() {
    instance.depth -= 1;
}
