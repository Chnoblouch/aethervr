use xr;

use aethervr.{
    log,
    instance.Instance,
    action.Action,
    utils.streq as eq,
};

enum InputDevice {
    UNKNOWN,
    HEAD,
    LEFT_HAND,
    RIGHT_HAND,
    ANY_HAND
}

enum InputIdentifier {
    UNKNOWN,
    GRIP,
    AIM,
    THUMBSTICK,
    TRIGGER,
    SQUEEZE,
    A_BUTTON,
    B_BUTTON,
    X_BUTTON,
    Y_BUTTON,
    MENU,
    SYSTEM,
}

enum InputLocation {
    UNKNOWN,
    CLICK,
    TOUCH,
    VALUE,
    POSE
}

struct ActionBinding {
    var device: InputDevice;
    var identifier: InputIdentifier;
    var location: InputLocation;
}

pub func set_action_bindings(
    instance: *Instance,
    suggested_bindings: *xr.InteractionProfileSuggestedBinding
) -> xr.Result {
    log.info("Suggesting interaction profile bindings");
    log.enter_scope();

    var profile = instance.path_mapping.get_string(suggested_bindings.interaction_profile).value;
    log.info("Interaction Profile: %", profile);

    var profile_path = suggested_bindings.interaction_profile;
    if !instance.path_mapping.is_path(profile_path, "/interaction_profiles/oculus/touch_controller") {
        log.info("Not Oculus Touch controller profile -> Ignored");
        log.exit_scope();
        return xr.Result.ERROR_PATH_UNSUPPORTED;
    }

    instance.interaction_profile = profile_path;

    log.info("Suggested bindings:");
    log.enter_scope();

    var actions = Set[*Action].new();
    var valid = true;

    for i in 0..suggested_bindings.count_suggested_bindings {
        var binding = suggested_bindings.suggested_bindings[i];
        var action = binding.action as *Action;
        var path = binding.binding;

        var string = instance.path_mapping.get_string(path).value;

        log.info("- % -> %", action.name.copy(), string);

        var tokens: [String] = [];
        var token = String.new();
        var index = 1;  # The first slash is skipped

        while true {
            var char = string[index];

            if char == '\0' {
                tokens.append(token.copy());
                break;
            } else if char == '/' {
                tokens.append(token.copy());
                token = String.new();
            } else {
                token.append(char);
            }

            index += 1;
        }


        try result in convert_action_binding(tokens) {
            # If an action has already been bound to a hand, bind it to any hand
            if action.binding.device == InputDevice.LEFT_HAND || action.binding.device == InputDevice.RIGHT_HAND {
                result.device = InputDevice.ANY_HAND;
            }

            action.binding = result;
        } else {
            valid = false;
        }

        actions.insert(action);
    }

    log.exit_scope();

    log.info("Resulting bindings:");
    log.enter_scope();

    for action in actions.elements {
        var binding_str = String.new();

        if action.binding.device == InputDevice.UNKNOWN { binding_str.append("unknown."); }
        else if action.binding.device == InputDevice.HEAD { binding_str.append("head."); }
        else if action.binding.device == InputDevice.LEFT_HAND { binding_str.append("left_hand."); }
        else if action.binding.device == InputDevice.RIGHT_HAND { binding_str.append("right_hand."); }
        else if action.binding.device == InputDevice.ANY_HAND { binding_str.append("any_hand."); }

        if action.binding.identifier == InputIdentifier.UNKNOWN { binding_str.append("unknown."); }
        else if action.binding.identifier == InputIdentifier.GRIP { binding_str.append("grip."); }
        else if action.binding.identifier == InputIdentifier.AIM { binding_str.append("aim."); }
        else if action.binding.identifier == InputIdentifier.THUMBSTICK { binding_str.append("thumbstick."); }
        else if action.binding.identifier == InputIdentifier.TRIGGER { binding_str.append("trigger."); }
        else if action.binding.identifier == InputIdentifier.SQUEEZE { binding_str.append("squeeze."); }
        else if action.binding.identifier == InputIdentifier.A_BUTTON { binding_str.append("a."); }
        else if action.binding.identifier == InputIdentifier.B_BUTTON { binding_str.append("b."); }
        else if action.binding.identifier == InputIdentifier.X_BUTTON { binding_str.append("x."); }
        else if action.binding.identifier == InputIdentifier.Y_BUTTON { binding_str.append("y."); }
        else if action.binding.identifier == InputIdentifier.MENU { binding_str.append("menu."); }
        else if action.binding.identifier == InputIdentifier.SYSTEM { binding_str.append("system."); }

        if action.binding.location == InputLocation.UNKNOWN { binding_str.append("unknown"); }
        else if action.binding.location == InputLocation.CLICK { binding_str.append("click"); }
        else if action.binding.location == InputLocation.TOUCH { binding_str.append("touch"); }
        else if action.binding.location == InputLocation.VALUE { binding_str.append("value"); }
        else if action.binding.location == InputLocation.POSE { binding_str.append("pose"); }

        log.info("%: %", action.name.copy(), binding_str);
    }

    log.exit_scope();
    log.exit_scope();

    if !valid {
        return xr.Result.ERROR_PATH_UNSUPPORTED;
    }

    return xr.Result.SUCCESS;
}

func convert_action_binding(tokens: Array[String]) -> ?ActionBinding {
    var binding = ActionBinding {
        device: InputDevice.UNKNOWN,
        identifier: InputIdentifier.UNKNOWN,
        location: InputLocation.UNKNOWN,
    };
    
    if tokens[0] != "user" || tokens[1] != "hand" {
        return none;
    }

    var hand = tokens[2].copy();

    if hand == "left" {
        binding.device = InputDevice.LEFT_HAND;
    } else if hand == "right" {
        binding.device = InputDevice.RIGHT_HAND;
    } else {
        return none;
    }

    if tokens[3] != "input" {
        return none;
    }

    var identifier = tokens[4].copy();

    if identifier == "grip" {
        binding.identifier = InputIdentifier.GRIP;
    } else if identifier == "aim" {
        binding.identifier = InputIdentifier.AIM;
    } else if identifier == "thumbstick" {
        binding.identifier = InputIdentifier.THUMBSTICK;
    } else if identifier == "trigger" {
        binding.identifier = InputIdentifier.TRIGGER;
    } else if identifier == "squeeze" {
        binding.identifier = InputIdentifier.SQUEEZE;
    } else if identifier == "a" {
        binding.identifier = InputIdentifier.A_BUTTON;
    } else if identifier == "b" {
        binding.identifier = InputIdentifier.B_BUTTON;
    } else if identifier == "x" {
        binding.identifier = InputIdentifier.X_BUTTON;
    } else if identifier == "y" {
        binding.identifier = InputIdentifier.Y_BUTTON;
    } else if identifier == "menu" {
        binding.identifier = InputIdentifier.MENU;
    } else if identifier == "system" {
        binding.identifier = InputIdentifier.SYSTEM;
    } else {
        return none;
    }

    if tokens.length >= 6 {
        var location = tokens[5].copy();

        if location == "click" {
            binding.location = InputLocation.CLICK;
        } else if location == "touch" {
            binding.location = InputLocation.TOUCH;
        } else if location == "value" {
            binding.location = InputLocation.VALUE;
        } else if location == "pose" {
            binding.location = InputLocation.POSE;
        }
    }

    return binding;
}
