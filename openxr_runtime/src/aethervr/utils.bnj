use std.math;
use c.lib.string.strcmp;

use xr;

pub func streq(a: *u8, b: *u8) -> bool {
    return strcmp(a, b) == 0;
}

pub func version(major: u64, minor: u64, patch: u64) -> u64 {
    return ((major & 0xFFFF) << 48) | ((minor & 0xFFFF) << 32) | (patch & 0xFFFFFFFF);
}

pub func handle_buffer_size(count: u32, count_out: *u32, capacity: u32) -> (bool, xr.Result) {
    *count_out = count;

    if capacity == 0 {
        return (true, xr.Result.SUCCESS);
    } else if capacity < count {
        return (true, xr.Result.ERROR_SIZE_INSUFFICIENT);
    }

    return (false, xr.Result.SUCCESS);
}

func handle_buffer[T](array: *[T], capacity: u32, count_out: *u32, buffer: *T) -> xr.Result {
    var count = array.length as u32;

    *count_out = count;
    if capacity == 0 {
        return xr.Result.SUCCESS;
    } else if capacity < count {
        return xr.Result.ERROR_SIZE_INSUFFICIENT;
    }

    for i in 0..count {
        buffer[i] = (*array)[i as usize];
    }

    return xr.Result.SUCCESS;
}

pub func is_successful(result: xr.Result) -> bool {
    return result as u32 >= 0;
}

pub func is_orientation_valid(q: xr.Quaternionf) -> bool {
    var length_squared = q.x * q.x + q.y * q.y + q.z * q.z + q.w * q.w;
   
    # An orientation is considered invalid if the length of the quaternion deviates by more than 1% from unit length.
    return length_squared >= 0.99 * 0.99 && length_squared <= 1.01 * 1.01;
}
