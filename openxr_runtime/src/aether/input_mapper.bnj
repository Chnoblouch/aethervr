use xr;

use aether.{
    session.Session,
    path.PathMapping,
    tracker_connection.{InputState, HandState},
    action.Action,
    action_binding.{ActionBinding, InputDevice, InputIdentifier, InputLocation},
    pose,
    logger as log
};

struct InputMapper {
    var path_mapping: *PathMapping;
    var state: *InputState;
    
    func new(session: *Session) -> InputMapper {
        return {
            path_mapping: &session.instance.path_mapping,
            state: &session.input_state,
        };
    }

    pub func get_space_pose(self, action: *Action, subaction_path: u64) -> xr.Posef {
        var binding = self.get_concrete_binding(action.binding, subaction_path);
        var hand_state = self.get_hand_state(binding.device);

        if hand_state.has_value {
            if binding.identifier == InputIdentifier.GRIP || binding.identifier == InputIdentifier.AIM {
                if binding.location == InputLocation.POSE {
                    return hand_state.value.pose;
                }
            }
        }

        return pose.pose(pose.orientation_identity(), pose.position(0.0, 0.0, 0.0));
    }

    pub func get_action_bool(self, action: *Action, subaction_path: u64) -> ?u32 {
        var binding = self.get_concrete_binding(action.binding, subaction_path);
        var hand_state = self.get_hand_state(binding.device);

        if hand_state.has_value {
            if binding.identifier == InputIdentifier.TRIGGER || binding.identifier == InputIdentifier.SQUEEZE {
                if hand_state.value.select { return 1; } else { return 0; }
            }
        }

        return none;
    }

    pub func get_action_float(self, action: *Action, subaction_path: u64) -> ?f32 {
        var binding = self.get_concrete_binding(action.binding, subaction_path);
        var hand_state = self.get_hand_state(binding.device);

        if hand_state.has_value {
            if binding.identifier == InputIdentifier.TRIGGER || binding.identifier == InputIdentifier.SQUEEZE {
                if hand_state.value.select { return 1.0; } else { return 0.0; }
            }
        }

        return none;
    }

    pub func get_action_vector2f(self, action: *Action, subaction_path: u64) -> ?f32 {
        var binding = self.get_concrete_binding(action.binding, subaction_path);
        var hand_state = self.get_hand_state(binding.device);

        return none;
    }

    func get_concrete_binding(self, binding: ActionBinding, subaction_path: u64) -> ActionBinding {
        return {
            device: self.get_concrete_device(binding.device, subaction_path),
            identifier: binding.identifier,
            location: binding.location
        };
    }

    func get_concrete_device(self, device: InputDevice, subaction_path: u64) -> InputDevice {
        if device == InputDevice.ANY_HAND {
            if self.path_mapping.is_path(subaction_path, "/user/hand/left") {
                return InputDevice.LEFT_HAND;
            } else if self.path_mapping.is_path(subaction_path, "/user/hand/right") {
                return InputDevice.RIGHT_HAND;
            } else {
                return InputDevice.UNKNOWN;
            }
        }

        return device;
    }

    func get_hand_state(self, device: InputDevice) -> ?*HandState {
        if device == InputDevice.LEFT_HAND {
            return self.state.left_hand;
        } else if device == InputDevice.RIGHT_HAND {
            return self.state.right_hand;
        } else {
            return none;
        }
    }
}