use std.{
    file.{File, FileMode},
    path.Path, 
    string.String,
    io.{Writer, CFileWriter},
    memory,
    convert.to_string
};

struct Logger {
	var file: File;
	var writer: Writer[CFileWriter];
	var depth: u32;
}

var instance: Logger;

func create_instance(path: Path) {
	instance.file = File.open(path, FileMode.WRITE).unwrap();
	instance.writer = instance.file.writer();
    instance.depth = 0;
}

pub func info[Args: ...](format: String, args: Args) {
	var string = "";

	var i = 0;

	meta for arg in args {
		while format.cstr()[i] != '\0' && format.cstr()[i] != '%' {
			string.append(format.cstr()[i]);
			i += 1;
		}

		string.append(to_string(&arg));
		i += 1;
	}

	while format.cstr()[i] != '\0' {
		string.append(format.cstr()[i]);
		i += 1;
	}

	instance.writer.write("[info ] ");
	
	for i in 0..instance.depth {
		instance.writer.write(' ');
		instance.writer.write(' ');
	}
	
	instance.writer.write(string);
	instance.writer.write('\n');
	instance.writer.flush();
}

pub func warn(message: String) {
	instance.writer.write("[warn ] ");
	
	for i in 0..instance.depth {
		instance.writer.write(' ');
		instance.writer.write(' ');
	}
	
	instance.writer.write(message);
	instance.writer.write('\n');
	instance.writer.flush();
}

pub func error(message: String) {
	instance.writer.write("[ERROR] ");
	instance.writer.write(message);
	instance.writer.write('\n');
	instance.writer.flush();
}

pub func enter_scope() {
	instance.depth += 1;
}

pub func exit_scope() {
	instance.depth -= 1;
}
